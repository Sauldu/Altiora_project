Altiora_project/
|-- .env.example                                             # Fichier d'exemple pour les variables d'environnement
|-- .gitignore                                               # Fichiers et dossiers √† ignorer par Git
|-- altiora_qa_assistant.py                                  # Script principal de l'assistant QA
|-- CHANGELOG.md                                             # Journal des modifications du projet
|-- Diagram.png                                              # Diagramme de l'architecture du projet
|-- docker-compose-validation.sh                             # Script de validation pour docker-compose
|-- docker-compose.yml                                       # D√©finition des services pour Docker Compose
|-- Dockerfile                                               # Instructions pour construire l'image Docker principale
|-- env-example-complete.txt                                 # Exemple complet de fichier d'environnement
|-- export.py                                                # Script pour exporter des donn√©es ou mod√®les
|-- pyproject.toml                                           # Fichier de configuration du projet et de build
|-- pytest.ini                                               # Fichier de configuration pour Pytest
|-- README.md                                                # Fichier d'information principal du projet
|-- requirements.txt                                         # Liste des d√©pendances Python du projet
|-- setup-script.py                                          # Script d'installation et de configuration
|-- structure.txt                                            # Description de la structure du projet (ce fichier)
|
|-- .github/                                                 # üìÅ Configuration pour GitHub
|   \---workflows/                                            # üìÅ Workflows d'int√©gration continue (CI/CD)
|       \---ci-cd.yml                                        # Workflow pour le d√©ploiement et les tests automatis√©s
|
|-- cli/                                                     # üìÅ Interface en ligne de commande
|   |-- main.py                                              # Point d'entr√©e de l'application CLI
|   |-- __init__.py                                          # Initialiseur du package cli
|   \---commands/                                            # üìÅ Commandes CLI sp√©cifiques
|       |-- __init__.py                                      # Initialiseur du package commands
|       |-- init.py                                          # Commande : initialiser un nouveau projet
|       |-- start.py                                         # Commande : d√©marrer les services
|       \---test.py                                          # Commande : lancer les tests
|
|-- configs/                                                 # üìÅ Fichiers de configuration centralis√©s
|   |-- config_module.py                                     # Module de configuration Pydantic pour les param√®tres
|   |-- error_handling.yaml                                  # Configuration pour la gestion des erreurs
|   |-- models_config.yaml                                   # Configuration des mod√®les de langue
|   |-- models.yaml                                          # D√©finition des mod√®les utilis√©s
|   |-- ollama_config.json                                   # Param√®tres de configuration pour Ollama
|   |-- ollama_optimized.yaml                                # Configuration optimis√©e pour Ollama
|   |-- retry_config.yaml                                    # Strat√©gies de nouvelle tentative pour les op√©rations r√©seau
|   |-- roles.json                                           # D√©finition des r√¥les et permissions (RBAC)
|   |-- services.yaml                                        # Configuration des micro-services
|   \---emergency_webhooks.json                              # Webhooks pour les alertes d'urgence
|
|-- data/                                                    # üìÅ Donn√©es utilis√©es par l'application
|   |-- models/                                              # üìÅ Mod√®les de machine learning sauvegard√©s
|   |-- scenarios/                                           # üìÅ Sc√©narios de test ou d'utilisation
|   |-- temp/                                                # üìÅ Fichiers de donn√©es temporaires
|   \---training/                                            # üìÅ Donn√©es pour l'entra√Ænement des mod√®les
|
|-- docker/                                                  # üìÅ Fichiers de configuration sp√©cifiques √† Docker
|
|-- docs/                                                    # üìÅ Documentation du projet
|   |-- Architecture Assistant IA Personnel_Spcifications.md # Sp√©cifications de l'assistant IA
|   |-- ARCHITECTURE.md                                      # Description de l'architecture globale
|   |-- env-documentation.md                                 # Documentation des variables d'environnement
|   |-- generate_docs.py                                     # Script pour g√©n√©rer la documentation
|   |-- installation_guide.md                                # Guide d'installation
|   \---examples/                                            # üìÅ Exemples d'utilisation
|       |-- login_test.py                                    # Exemple de script de test Playwright
|       |-- minimal_sfd.txt                                  # Exemple de document de sp√©cification fonctionnelle
|
|-- guardrails/                                              # üîí Modules de s√©curit√© et de contr√¥le
|   |-- __init__.py                                          # Initialiseur du package guardrails
|   |-- admin_control_system.py                              # Syst√®me de contr√¥le pour les administrateurs
|   |-- admin_dashboard.py                                   # Interface pour le tableau de bord administrateur
|   |-- emergency_handler.py                                 # Gestionnaire des situations d'urgence
|   |-- ethical_safeguards.py                                # Garde-fous √©thiques pour l'IA
|   |-- interaction_guardrail.py                             # Filtres pour les interactions utilisateur
|   |-- policy_enforcer.py                                   # Application des politiques de s√©curit√©
|   \---toxicity_guardrail.py                                # D√©tection de contenu toxique
|
|-- logs/                                                    # üìÅ Fichiers de logs de l'application
|
|-- models/                                                  # üìÅ Mod√®les de donn√©es ou sch√©mas (non-ML)
|
|-- policies/                                                # üìã R√®gles m√©tier et politiques
|   |-- __init__.py                                          # Initialiseur du package policies
|   |-- business_rules.py                                    # Impl√©mentation des r√®gles m√©tier
|   |-- excel_policy.py                                      # Politiques sp√©cifiques au traitement Excel
|   |-- privacy_policy.py                                    # Politiques de confidentialit√© des donn√©es
|   \---toxicity_policy.py                                   # Politiques relatives √† la toxicit√© du contenu
|
|-- post_processing/                                         # üßπ Nettoyage et formatage des sorties
|   |-- __init__.py                                          # Initialiseur du package post_processing
|   |-- code_validator.py                                    # Validation et linting du code g√©n√©r√©
|   |-- excel_formatter.py                                   # Formatage des fichiers Excel
|   \---output_sanitizer.py                                  # Nettoyage des sorties (ex: masquage de PII)
|
|-- psychodesign/                                            # üß† Gestion de la personnalit√© de l'IA
|   |-- __init__.py                                          # Initialiseur du package psychodesign
|   |-- altiora_core.py                                      # Noyau de la personnalit√© de l'IA
|   |-- personality_evolution.py                             # M√©canisme d'√©volution de la personnalit√©
|   \---personality_quiz.py                                  # Quiz pour d√©finir la personnalit√© initiale
|
|-- reports/                                                 # üìÅ Rapports g√©n√©r√©s (performance, audit, etc.)
|
|-- results/                                                 # üìÅ R√©sultats des ex√©cutions (tests, exports)
|
|-- scripts/                                                 # üõ†Ô∏è Scripts utilitaires pour le d√©veloppement
|   |-- audit_query.py                                       # Script pour interroger les logs d'audit
|   |-- backup_redis.sh                                      # Script de sauvegarde de la base de donn√©es Redis
|   |-- cpu_optimization_script.py                           # Script pour optimiser l'utilisation du CPU
|   |-- diagnose_ollama.py                                   # Outil de diagnostic pour Ollama
|   |-- generate_keys.py                                     # G√©n√©ration de cl√©s de chiffrement/API
|   |-- generate_performance_report.py                       # G√©n√©ration de rapports de performance
|   |-- qwen3_modelfile                                      # D√©finition du mod√®le Qwen3 pour Ollama
|   |-- run_performance_tests.sh                             # Lanceur pour les tests de performance
|   |-- setup_integration_tests.sh                           # Script de configuration des tests d'int√©gration
|   |-- starcoder2_modelfile                                 # D√©finition du mod√®le Starcoder2 pour Ollama
|   |-- start_dev.sh                                         # Script pour d√©marrer l'environnement de d√©veloppement
|   \---validate_setup.py                                    # Validation de la configuration de l'environnement
|
|-- services/                                                # üì¶ Micro-services conteneuris√©s
|   |-- alm/                                                 # üìÅ Service ALM (Application Lifecycle Management)
|   |   |-- alm_service.py                                   # Logique du service ALM
|   |   |-- Dockerfile                                   # Backup du Dockerfile pour le service
|   |   |-- requirements.txt                                 # D√©pendances Python du service
|   |   \---__init__.py                                      # Initialiseur du package
|   |-- excel/                                               # üìÅ Service de traitement Excel
|   |   |-- Dockerfile                                   # Backup du Dockerfile pour le service
|   |   |-- excel_service.py                                 # Logique du service Excel
|   |   |-- requirements.txt                                 # D√©pendances Python du service
|   |   \---__init__.py                                      # Initialiseur du package
|   |-- ocr/                                                 # üìÅ Service OCR (Reconnaissance Optique de Caract√®res)
|   |   |-- Dockerfile                                   # Backup du Dockerfile pour le service
|   |   |-- ocr_wrapper.py                                   # Wrapper pour le service OCR
|   |   \---__init__.py                                      # Initialiseur du package
|   \---playwright/                                          # üìÅ Service d'automatisation avec Playwright
|       |-- Dockerfile                                   # Backup du Dockerfile pour le service
|       |-- playwright_runner.py                             # Ex√©cuteur de tests Playwright
|       |-- requirements.txt                                 # D√©pendances Python du service
|       \---__init__.py                                      # Initialiseur du package
|
|-- src/                                                     # üéØ C≈ìur de l'application et de l'orchestrateur
|   |-- App.js                                               # Fichier principal pour l'interface React
|   |-- batch_processor.py                                   # Traitement des t√¢ches en lots
|   |-- config.py                                            # Configuration principale de l'application
|   |-- error_management.py                                  # Module central de gestion des erreurs
|   |-- main.py                                              # Point d'entr√©e principal de l'application
|   |-- models.py                                            # Mod√®les de donn√©es (Pydantic/SQLAlchemy)
|   |-- orchestrator.py                                      # Orchestre le pipeline des t√¢ches
|   |-- __init__.py                                          # Initialiseur du package src
|   |-- audit/                                               # üìÅ Journalisation et audit
|   |   |-- decorator.py                                     # D√©corateurs pour l'audit
|   |   |-- models.py                                        # Mod√®les de donn√©es pour les logs d'audit
|   |   |-- ring_buffer.py                                   # Buffer circulaire pour les logs en m√©moire
|   |   |-- rotation.py                                      # Logique de rotation des fichiers de log
|   |   \---writer.py                                        # √âcriture des logs sur disque/r√©seau
|   |-- auth/                                                # üìÅ Authentification et autorisation
|   |   |-- auth_integration.py                              # Int√©gration avec des fournisseurs d'identit√©
|   |   |-- config.py                                        # Configuration sp√©cifique √† l'authentification
|   |   |-- jwt_handler.py                                   # Gestion des tokens JWT
|   |   |-- main.py                                          # Point d'entr√©e du service d'auth
|   |   |-- middleware.py                                    # Middleware d'authentification pour les requ√™tes
|   |   |-- models.py                                        # Mod√®les de donn√©es pour les utilisateurs/r√¥les
|   |   |-- password_utils.py                                # Utilitaires pour le hachage de mots de passe
|   |   \---user_service.py                                  # Logique m√©tier pour la gestion des utilisateurs
|   |-- cache/
|   |   \---__init__.py
|   |   |-- intelligent_cache.py
|   |-- components/                                          # üìÅ Composants d'interface (React)
|   |   |-- Layout.js                                        # Composant de mise en page principal
|   |   |-- Reports.js                                       # Composant pour l'affichage des rapports
|   |   \---Tests.js                                         # Composant pour l'affichage des tests
|   |-- core/                                                # üìÅ Logique m√©tier principale
|   |   |-- altiora_assistant.py                             # Classe principale de l'assistant
|   |   |-- async_pipeline.py                                # Pipeline asynchrone pour les traitements
|   |   |-- fallback_system.py                               # Syst√®me de fallback pour les erreurs
|   |   |-- state_manager.py                                 # Gestionnaire d'√©tat centralis√© (Redis)
|   |   |-- workflow_engine.py                               # Moteur d'orchestration des workflows
|   |   \---__init__.py                                      # Initialiseur du package
|   |-- events/
|   |   \---__init__.py
|   |   |-- event_bus.py
|   |-- factories/                                           # üìÅ Fabriques de mod√®les et services
|   |   \---model_factory.py                                 # Fabrique pour instancier les mod√®les IA
|   |-- infrastructure/                                      # üìÅ Connexion aux services externes
|   |   |-- connection_pool.py                               # Pool de connexions (DB, Redis, etc.)
|   |   |-- encryption.py                                    # Utilitaires de chiffrement
|   |   \---redis_config.py                                  # Configuration de la connexion Redis
|   |-- middleware/                                          # üìÅ Middlewares pour le traitement des requ√™tes
|   |   |-- advanced_rate_limiter.py                         # Limiteur de d√©bit avanc√©
|   |   |-- cache_middleware.py                              # Middleware de mise en cache
|   |   \---rbac_middleware.py                               # Middleware pour le contr√¥le d'acc√®s bas√© sur les r√¥les
|   |-- models/                                              # üìÅ Interfaces avec les mod√®les de langue
|   |   |-- model_registry.py/
|   |   |-- qwen3/                                           # üìÅ Interface pour Qwen3
|   |   |   |-- adapters.py                                  # Adaptateurs de sortie Qwen3
|   |   |   |-- fine_tuning.py                               # Scripts pour le fine-tuning
|   |   |   |-- qwen3_interface.py                           # Impl√©mentation sp√©cifique pour Qwen3
|   |   |   \---__init__.py                                  # Initialiseur du package
|   |   |-- starcoder2/                                      # üìÅ Interface pour Starcoder2
|   |   |   |-- code_generator.py                            # G√©n√©ration de code avec Starcoder2
|   |   |   |-- starcoder2_interface.py                      # Impl√©mentation sp√©cifique pour Starcoder2
|   |   |   \---__init__.py                                  # Initialiseur du package
|   |   \---sfd_models.py                                    # Mod√®les de donn√©es pour les sp√©cifications fonctionnelles
|   |-- monitoring/                                          # üìÅ Surveillance et m√©triques
|   |   |-- dashboard.py                                     # Tableau de bord de performance
|   |   |-- metrics.py                                       # M√©triques Prometheus
|   |   |-- metrics_collector.py                             # Collecteur de m√©triques
|   |   |-- healthcheck.py
|   |   \---__init__.py                                      # Initialiseur du package
|   |-- playwright/
|   |   \---__init__.py
|   |   |-- optimized_runner.py
|   |-- plugins/
|   |   \---__init__.py
|   |   |-- plugin_system.py
|   |-- rbac/                                                # üìÅ Logique RBAC (Role-Based Access Control)
|   |   |-- manager.py                                       # Gestionnaire des r√¥les et permissions
|   |   |-- models.py                                        # Mod√®les de donn√©es pour les r√¥les/permissions
|   |   \---__init__.py                                      # Initialiseur du package
|   |-- redux/                                               # üìÅ Gestion d'√©tat Redux pour le frontend
|   |   |-- chatSlice.js                                     # Slice pour la gestion du chat
|   |   |-- reportsSlice.js                                  # Slice pour la gestion des rapports
|   |   |-- store.js                                         # Configuration du store Redux
|   |   \---testsSlice.js                                    # Slice pour la gestion des tests
|   |-- repositories/                                        # üìÅ Acc√®s aux donn√©es (ORM/Repositories)
|   |   |-- base_repository.py                               # Repository de base abstrait
|   |   \---scenario_repository.py                           # Repository pour les sc√©narios de test
|   |-- security/                                            # üîê S√©curit√© et chiffrement
|   |   \---encryption.py                                    # Utilitaires de chiffrement des donn√©es
|   |-- training/
|   |   \---__init__.py
|   |   |-- advanced_trainer.py
|   \---utils/                                               # üìÅ Utilitaires divers
|       |-- __init__.py                                      # Initialiseur du package utils
|       |-- batch_processor.py                               # Processeur de t√¢ches en lots optimis√©
|       |-- circuit_breaker.py                               # Impl√©mentation du pattern Circuit Breaker
|       |-- compression.py                                   # Utilitaires de compression/d√©compression
|       |-- cpu_manager.py                                   # Gestionnaire de l'utilisation CPU
|       |-- error_monitor.py                                 # Surveillance et journalisation des erreurs
|       |-- memory_optimizer.py                              # Optimisation de l'utilisation m√©moire
|       |-- model_loader.py                                  # Chargement et pr√©-chargement des mod√®les
|       |-- retry_handler.py                                 # Gestionnaire de nouvelles tentatives
|       \---smart_cache.py                                   # Cache intelligent avec TTL et invalidation
|
|-- temp/                                                    # üìÅ Fichiers et dossiers temporaires
|
\---tests/                                                   # üß™ Suite de tests du projet
    |-- __init__.py                                          # Initialiseur du package tests
    |-- conftest.py                                          # Fixtures et configuration pour Pytest
    |-- test_admin_control.py                                # Tests pour le syst√®me de contr√¥le admin
    |-- test_altiora_core.py                                 # Tests pour le noyau de la personnalit√©
    |-- test_ethical_safeguards.py                           # Tests pour les garde-fous √©thiques
    |-- test_fine_tuning.py                                  # Tests pour le processus de fine-tuning
    |-- test_integration.py                                  # Tests d'int√©gration g√©n√©raux
    |-- test_interfaces.py                                   # Tests pour les interfaces des mod√®les
    |-- test_ocr_wrapper.py                                  # Tests pour le wrapper OCR
    |-- test_orchestrator.py                                 # Tests pour l'orchestrateur principal
    |-- test_personality_quiz.py                             # Tests pour le quiz de personnalit√©
    |-- test_playwright_runner.py                            # Tests pour l'ex√©cuteur Playwright
    |-- test_retry_handler.py                                # Tests pour le gestionnaire de tentatives
    |-- test_services.py                                     # Tests pour les micro-services
    |-- integration/                                         # üìÅ Tests d'int√©gration
    |   |-- __init__.py                                      # Initialiseur du package
    |   |-- conftest.py                                      # Fixtures sp√©cifiques √† l'int√©gration
    |   |-- makefile                                         # Makefile pour les tests d'int√©gration
    |   |-- test_full_pipeline.py                            # Test du pipeline complet de bout en bout
    |   |-- test_performance.py                              # Tests de performance en int√©gration
    |   \---test_services_integration.py                     # Tests d'int√©gration des services
    |-- performance/                                         # üìÅ Tests de performance et de charge
    |   |-- config.yaml                                      # Configuration pour les tests de performance
    |   |-- test_load_testing.py                             # Tests de charge
    |   |-- test_pipeline_load.py                            # Tests de charge du pipeline
    |   \---test_redis_performance.py                        # Tests de performance de Redis
    \---regression/                                          # üìÅ Tests de r√©gression
        |-- __init__.py                                      # Initialiseur du package
        |-- regression_config.yaml                           # Configuration pour les tests de r√©gression
        |-- run_regression.py                                # Lanceur pour la suite de r√©gression
        \---test_regression_suite.py                         # Suite de tests de r√©gression