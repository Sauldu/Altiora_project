#!/usr/bin/env python3
"""Script d'installation et de configuration en un clic pour le projet Altiora.

Ce script automatise la mise en place de l'environnement de d√©veloppement
et de production d'Altiora. Il g√®re la v√©rification des pr√©requis syst√®me,
la cr√©ation d'un environnement virtuel Python, l'installation des d√©pendances,
la configuration des variables d'environnement, la cr√©ation des r√©pertoires
n√©cessaires, le t√©l√©chargement des mod√®les Ollama et la v√©rification des services.

Il est con√ßu pour √™tre idempotent, c'est-√†-dire qu'il peut √™tre ex√©cut√©
plusieurs fois sans causer d'effets secondaires ind√©sirables.
"""

import argparse
import platform
import shutil
import subprocess
import sys
from pathlib import Path
from typing import List
import logging

from configs.config_module import get_settings

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class AltioraSetup:
    """Installateur idempotent pour le projet Altiora."""

    def __init__(self, base_dir: Path = Path.cwd()) -> None:
        """Initialise l'installateur."

        Args:
            base_dir: Le r√©pertoire de base du projet (par d√©faut, le r√©pertoire courant).
        """
        self.base_dir = base_dir
        self.venv_path = base_dir / ".venv"
        self.python_min = (3, 8)
        self.errors: List[str] = []
        self.warnings: List[str] = []
        self.successes: List[str] = []
        self.settings = get_settings()

    # ------------------------------------------------------------------
    # Flux d'ex√©cution principal
    # ------------------------------------------------------------------
    def run(self, *, skip_services: bool = False, dev_mode: bool = False) -> None:
        """Ex√©cute le processus d'installation complet."

        Args:
            skip_services: Si True, saute le t√©l√©chargement des mod√®les Ollama et la v√©rification des services.
            dev_mode: Si True, installe les d√©pendances de d√©veloppement.
        """
        logger.info("üöÄ D√©marrage de l'installateur Altiora")
        print("=" * 60)

        self.check_python_version()
        self.check_system_requirements()
        self.setup_virtual_environment()
        self.install_dependencies(dev_mode)
        self.setup_environment()
        self.create_directories()
        if not skip_services:
            self.setup_ollama_models()
            self.check_services()
        self.init_database()
        self.print_summary()

    # ------------------------------------------------------------------
    # V√©rifications des pr√©requis
    # ------------------------------------------------------------------
    def check_python_version(self) -> None:
        """V√©rifie que la version de Python install√©e est compatible."

        Si la version est inf√©rieure √† `self.python_min`, une erreur est ajout√©e et le script s'arr√™te.
        """
        if sys.version_info < self.python_min:
            self.errors.append(
                f"Version de Python insuffisante. Python ‚â• {'.'.join(map(str, self.python_min))} est requis. Version actuelle : {'.'.join(map(str, sys.version_info[:3]))}"
            )
            sys.exit(1)
        self.successes.append(f"Version de Python {'.'.join(map(str, sys.version_info[:2]))} ‚úì")

    def check_system_requirements(self) -> None:
        """V√©rifie la pr√©sence des outils syst√®me n√©cessaires (Git, Docker)."

        Des avertissements sont ajout√©s si les outils ne sont pas trouv√©s.
        """
        tools = [("Git", "git"), ("Docker", "docker")]
        for name, cmd in tools:
            if shutil.which(cmd):
                self.successes.append(f"{name} ‚úì")
            else:
                self.warnings.append(f"{name} non trouv√©. Veuillez l'installer pour une fonctionnalit√© compl√®te.")

    # ------------------------------------------------------------------
    # Environnement virtuel
    # ------------------------------------------------------------------
    def setup_virtual_environment(self) -> None:
        """Cr√©e et configure l'environnement virtuel Python du projet."

        Si l'environnement virtuel existe d√©j√†, il n'est pas recr√©√©.
        """
        import venv  # Le module `venv` fait partie de la biblioth√®que standard de Python.

        if not self.venv_path.exists():
            logger.info(f"Cr√©ation de l'environnement virtuel dans {self.venv_path}...")
            venv.create(self.venv_path, with_pip=True)
            self.successes.append("Environnement virtuel cr√©√© ‚úì")
        else:
            self.successes.append("Environnement virtuel d√©j√† existant ‚úì")

        self._write_activation_script()

    def _write_activation_script(self) -> None:
        """√âcrit un script d'activation simple pour l'environnement virtuel."

        Cela facilite l'activation de l'environnement virtuel pour l'utilisateur.
        """
        if platform.system() == "Windows":
            script = self.base_dir / "activate.bat"
            script.write_text(
                f"@echo off\ncall {self.venv_path}\Scripts\activate.bat\necho Environnement virtuel activ√©.\n"
            )
        else:
            script = self.base_dir / "activate.sh"
            script.write_text(
                f'#!/bin/bash\nsource {self.venv_path}/bin/activate\necho Environnement virtuel activ√©.\n'
            )
            script.chmod(0o755) # Rend le script ex√©cutable.
        self.successes.append(f"Script d'activation cr√©√© ({script.name}) ‚úì")

    # ------------------------------------------------------------------
    # D√©pendances
    # ------------------------------------------------------------------
    def install_dependencies(self, dev: bool) -> None:
        """Installe les d√©pendances Python du projet."

        Args:
            dev: Si True, installe √©galement les d√©pendances de d√©veloppement depuis `requirements-dev.txt`.
        """
        logger.info("Installation des d√©pendances Python...")
        pip_command = [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"]
        if dev:
            pip_command.extend(["-r", "requirements-dev.txt"])

        try:
            subprocess.run(pip_command, check=True, capture_output=True, text=True)
            self.successes.append("D√©pendances Python install√©es ‚úì")
        except subprocess.CalledProcessError as e:
            self.errors.append(f"√âchec de l'installation des d√©pendances Python : {e.stderr}")
            return

        # Installe les navigateurs Playwright si Playwright est une d√©pendance.
        if "playwright" in Path("requirements.txt").read_text():
            logger.info("Installation des navigateurs Playwright...")
            try:
                subprocess.run(["playwright", "install", "chromium"], check=True, capture_output=True, text=True)
                self.successes.append("Navigateur Playwright (Chromium) install√© ‚úì")
            except subprocess.CalledProcessError as e:
                self.errors.append(f"√âchec de l'installation des navigateurs Playwright : {e.stderr}")

    # ------------------------------------------------------------------
    # Environnement et r√©pertoires
    # ------------------------------------------------------------------
    def setup_environment(self) -> None:
        """Configure le fichier d'environnement `.env` et injecte la cl√© secr√®te JWT."

        Si `.env` n'existe pas, il est cr√©√© √† partir de `.env.example`.
        """
        env_src = self.base_dir / ".env.example"
        env_dst = self.base_dir / ".env"

        if env_src.exists() and not env_dst.exists():
            logger.info(f"Cr√©ation du fichier .env √† partir de {env_src.name}...")
            env_dst.write_text(env_src.read_text())
            self._inject_jwt_secret(env_dst)
            self.successes.append("Fichier .env cr√©√© et configur√© ‚úì")
        elif env_dst.exists():
            logger.info("Fichier .env d√©j√† existant. V√©rification de la cl√© JWT...")
            self._inject_jwt_secret(env_dst)
            self.successes.append("Fichier .env existant (cl√© JWT v√©rifi√©e) ‚úì")
        else:
            self.warnings.append("Ni .env ni .env.example trouv√©s. Veuillez cr√©er un fichier .env manuellement.")

    @staticmethod
    def _inject_jwt_secret(env_file: Path) -> None:
        """Injecte une cl√© secr√®te JWT al√©atoire dans le fichier .env si elle n'est pas d√©j√† d√©finie."

        Args:
            env_file: Le chemin vers le fichier `.env`.
        """
        import secrets

        content = env_file.read_text()
        # V√©rifie si le placeholder de la cl√© secr√®te est pr√©sent.
        if "JWT_SECRET_KEY=your-secret-key-here" in content:
            key = secrets.token_urlsafe(32) # G√©n√®re une cl√© s√©curis√©e.
            new_content = content.replace("JWT_SECRET_KEY=your-secret-key-here", f"JWT_SECRET_KEY={key}")
            env_file.write_text(new_content)
            logger.info("Cl√© JWT_SECRET_KEY inject√©e dans .env ‚úì")
        elif "JWT_SECRET_KEY=" not in content:
            # Si la cl√© n'est pas pr√©sente du tout, l'ajoute.
            key = secrets.token_urlsafe(32)
            with open(env_file, "a") as f:
                f.write(f"\nJWT_SECRET_KEY={key}\n")
            logger.info("Cl√© JWT_SECRET_KEY ajout√©e √† .env ‚úì")
        else:
            logger.info("Cl√© JWT_SECRET_KEY d√©j√† pr√©sente dans .env ‚úì")

    def create_directories(self) -> None:
        """Cr√©e les r√©pertoires n√©cessaires pour le projet."

        Utilise les chemins d√©finis dans la configuration de l'application.
        """
        logger.info("Cr√©ation des r√©pertoires n√©cessaires...")
        # Liste des r√©pertoires √† cr√©er.
        dirs_to_create = [
            self.settings.data_dir,
            self.settings.models_dir,
            self.settings.logs_dir,
            self.settings.reports_dir,
            self.settings.temp_dir,
            self.base_dir / "workspace", # R√©pertoire de travail pour les ex√©cutions.
            self.base_dir / "screenshots", # Pour les captures d'√©cran des tests.
            self.base_dir / "videos", # Pour les enregistrements vid√©o des tests.
            self.base_dir / "artifacts", # Pour les artefacts g√©n√©r√©s.
        ]
        for d in dirs_to_create:
            d.mkdir(parents=True, exist_ok=True)
        self.successes.append("R√©pertoires cr√©√©s ‚úì")

    # ------------------------------------------------------------------
    # Ollama et services
    # ------------------------------------------------------------------
    def setup_ollama_models(self) -> None:
        """T√©l√©charge les mod√®les Ollama requis par l'application."

        Les mod√®les sont d√©finis dans la configuration de l'application.
        """
        logger.info("T√©l√©chargement des mod√®les Ollama...")
        # R√©cup√®re les noms des mod√®les √† partir de la configuration.
        models_to_pull = [model_config.base_model for model_config in self.settings.models.values()]
        
        if not models_to_pull:
            self.warnings.append("Aucun mod√®le Ollama configur√© √† t√©l√©charger.")
            return

        for model in models_to_pull:
            try:
                logger.info(f"  - Pulling {model}...")
                subprocess.run(["ollama", "pull", model], check=True, capture_output=True, text=True)
                self.successes.append(f"Mod√®le Ollama {model} t√©l√©charg√© ‚úì")
            except FileNotFoundError:
                self.errors.append("La commande `ollama` n'a pas √©t√© trouv√©e. Assurez-vous qu'Ollama est install√© et dans le PATH.")
                return # Arr√™te si ollama n'est pas trouv√©.
            except subprocess.CalledProcessError as e:
                self.errors.append(f"√âchec du t√©l√©chargement du mod√®le Ollama {model}: {e.stderr}")

    def check_services(self) -> None:
        """V√©rifie la disponibilit√© des services externes (Redis, Ollama, microservices)."

        Des avertissements sont ajout√©s si un service n'est pas joignable.
        """
        logger.info("V√©rification des services externes...")
        services_to_check = [
            ("Redis", ["redis-cli", "ping"], "PONG"),
            ("Ollama", ["curl", "-s", "http://localhost:11434/api/tags"], "models"), # V√©rifie un endpoint Ollama.
            ("Service OCR", ["curl", "-s", "http://localhost:8001/health"], "healthy"),
            ("Service ALM", ["curl", "-s", "http://localhost:8002/health"], "healthy"),
            ("Service Excel", ["curl", "-s", "http://localhost:8003/health"], "healthy"),
            ("Service Playwright", ["curl", "-s", "http://localhost:8004/health"], "healthy"),
        ]
        for name, cmd_args, expected_output_part in services_to_check:
            try:
                result = subprocess.run(cmd_args, check=True, capture_output=True, text=True, timeout=5)
                if expected_output_part in result.stdout or expected_output_part in result.stderr:
                    self.successes.append(f"{name} ‚úì")
                else:
                    self.warnings.append(f"{name} joignable mais r√©ponse inattendue.")
            except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired) as e:
                self.warnings.append(f"{name} non joignable ou erreur : {e}")
            except Exception as e:
                self.warnings.append(f"{name} : Erreur inattendue lors de la v√©rification : {e}")

    def init_database(self) -> None:
        """Initialise la base de donn√©es (stub pour l'instant)."

        Dans cette version, il n'y a pas de base de donn√©es SQL directe configur√©e,
        uniquement Redis. Cette m√©thode est un placeholder pour une future int√©gration.
        """
        self.successes.append("Initialisation de la base de donn√©es (pas de DB SQL configur√©e, seulement Redis) ‚úì")

    # ------------------------------------------------------------------
    # R√©sum√©
    # ------------------------------------------------------------------
    def print_summary(self) -> None:
        """Affiche un r√©sum√© des r√©sultats de l'installation."

        Liste les succ√®s, les avertissements et les erreurs.
        """
        print("\n" + "=" * 60)
        logger.info("üìä R√©sum√© de l'installation Altiora")
        print("=" * 60)

        for label, items in (
                ("‚úÖ Succ√®s", self.successes),
                ("‚ö†Ô∏è Avertissements", self.warnings),
                ("‚ùå Erreurs", self.errors),
        ):
            if items:
                logger.info(f"{label} ({len(items)})")
                for item in items:
                    logger.info(f"   ‚Ä¢ {item}")
        if self.errors:
            logger.error("\nL'installation a √©chou√© en raison des erreurs ci-dessus. Veuillez les corriger.")
            sys.exit(1)
        else:
            logger.info("\nüéâ Installation termin√©e avec succ√®s (avec avertissements si pr√©sents) !")


# ------------------------------------------------------------------
# Point d'entr√©e du script
# ------------------------------------------------------------------
def main() -> None:
    """Fonction principale pour ex√©cuter le script d'installation."

    Parse les arguments de la ligne de commande et lance le processus d'installation.
    """
    parser = argparse.ArgumentParser(description="Installateur Altiora.")
    parser.add_argument("--skip-services", action="store_true", help="Ne pas t√©l√©charger les mod√®les Ollama ni v√©rifier les services.")
    parser.add_argument("--dev", action="store_true", help="Installer les d√©pendances de d√©veloppement.")
    args = parser.parse_args()

    # V√©rifie que le script est ex√©cut√© depuis la racine du projet.
    if not (Path("requirements.txt").exists() and Path("configs").exists()):
        logger.error("‚ùå Veuillez ex√©cuter ce script depuis la racine du r√©pertoire du projet Altiora.")
        sys.exit(1)

    AltioraSetup().run(skip_services=args.skip_services, dev_mode=args.dev)


if __name__ == "__main__":
    main()